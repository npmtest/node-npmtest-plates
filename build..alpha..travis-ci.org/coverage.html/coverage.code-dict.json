{"/home/travis/build/npmtest/node-npmtest-plates/test.js":"/* istanbul instrument in package npmtest_plates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-plates/lib.npmtest_plates.js":"/* istanbul instrument in package npmtest_plates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_plates = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_plates = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-plates/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-plates && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_plates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_plates\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_plates.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_plates.rollup.js'] =\n            local.assetsDict['/assets.npmtest_plates.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_plates.__dirname + '/lib.npmtest_plates.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-plates/node_modules/plates/lib/plates.js":"var Plates = (typeof module !== 'undefined' && 'id' in module && typeof exports !== 'undefined') ? exports : {};\n\n!function(exports, env, undefined) {\n  \"use strict\";\n\n  //\n  // Cache variables to increase lookup speed.\n  //\n  var _toString = Object.prototype.toString;\n\n  //\n  // Polyfill the Array#indexOf method for cross browser compatibility.\n  //\n  [].indexOf || (Array.prototype.indexOf = function indexOf(a, b ,c){\n    for (\n      c = this.length , b = (c+ ~~b) % c;\n      b < c && (!(b in this) || this[b] !==a );\n      b++\n    );\n\n    return b^c ? b : -1;\n  });\n\n  //\n  // Polyfill Array.isArray for cross browser compatibility.\n  //\n  Array.isArray || (Array.isArray = function isArray(a) {\n    return _toString.call(a) === '[object Array]';\n  });\n\n  //\n  // ### function fetch(data, mapping, value, key)\n  // #### @data {Object} the data that we need to fetch a value from\n  // #### @mapping {Object} The iterated mapping step\n  // #### @tagbody {String} the tagbody we operated against\n  // #### @key {String} optional key if the mapping doesn't have a dataKey\n  // Fetches the correct piece of data\n  //\n  function fetch(data, mapping, value, tagbody, key) {\n    key = mapping.dataKey || key;\n\n    //\n    // Check if we have data manipulation or filtering function.\n    //\n    if (mapping.dataKey && typeof mapping.dataKey === 'function') {\n      return mapping.dataKey(data, value || '', tagbody || '', key);\n    }\n\n    //\n    // See if we are using dot notation style\n    //\n    if (!~key.indexOf('.')) return data[key];\n\n    var result = key\n      , structure = data;\n\n    for (var paths = key.split('.'), i = 0, length = paths.length; i < length && structure; i++) {\n      result = structure[+paths[i] || paths[i]];\n      structure = result;\n    }\n\n    return result !== undefined ? result : data[key];\n  }\n\n  //\n  // compileMappings\n  //\n  // sort the mappings so that mappings for the same attribute and value go consecutive\n  // and inside those, those that change attributes appear first.\n  //\n  function compileMappings(oldMappings) {\n    var mappings = oldMappings.slice(0);\n\n    mappings.sort(function(map1, map2) {\n      if (!map1.attribute) return 1;\n      if (!map2.attribute) return -1;\n\n      if (map1.attribute !== map2.attribute) {\n        return map1.attribute < map2.attribute ? -1 : 1;\n      }\n      if (map1.value !== map2.value) {\n        return map1.value < map2.value ? -1 : 1;\n      }\n      if (! ('replace' in map1) && ! ('replace' in map2)) {\n        throw new Error('Conflicting mappings for attribute ' + map1.attribute + ' and value ' + map1.value);\n      }\n      if (map1.replace) {\n        return 1;\n      }\n      return -1;\n    });\n\n    return mappings;\n  }\n\n//\n// Matches a closing tag to a open tag\n//\nfunction matchClosing(input, tagname, html) {\n  var closeTag = '</' + tagname + '>',\n      openTag  = new RegExp('< *' + tagname + '( *|>)', 'g'),\n      closeCount = 0,\n      openCount = -1,\n      from, to, chunk\n      ;\n\n  from = html.search(input);\n  to = from;\n\n  while(to > -1 && closeCount !== openCount) {\n    to = html.indexOf(closeTag, to);\n    if (to > -1) {\n      to += tagname.length + 3;\n      closeCount ++;\n      chunk = html.slice(from, to);\n      openCount = chunk.match(openTag).length;\n    }\n  }\n  if (to === -1) {\n    throw new Error('Unmatched tag ' + tagname + ' in ' + html)\n  }\n\n  return chunk;\n}\n\n  var Merge = function Merge() {};\n  Merge.prototype = {\n    nest: [],\n\n    tag: new RegExp([\n      '<',\n      '(/?)', // 2 - is closing\n      '([-:\\\\w]+)', // 3 - name\n      '((?:[-\\\\w]+(?:', '=',\n      '(?:\\\\w+|[\"|\\'](?:.*)[\"|\\']))?)*)', // 4 - attributes\n      '(/?)', // 5 - is self-closing\n      '>'\n    ].join('\\\\s*')),\n\n    //\n    // HTML attribute parser.\n    //\n    attr: /([\\-\\w]*)\\s*=\\s*(?:([\"\\'])([\\-\\.\\w\\s\\/:;&#]*)\\2)/gi,\n\n    //\n    // In HTML5 it's allowed to have to use self closing tags without closing\n    // separators. So we need to detect these elements based on the tag name.\n    //\n    selfClosing: /^(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/,\n\n    //\n    // ### function hasClass(str, className)\n    // #### @str {String} the class attribute\n    // #### @className {String} the className that the classAttribute should contain\n    //\n    // Helper function for detecting if a class attribute contains the className\n    //\n    hasClass: function hasClass(str, className) {\n      return ~str.split(' ').indexOf(className);\n    },\n\n    //\n    // ### function iterate(html, value, components, tagname, key)\n    // #### @html {String} peice of HTML\n    // #### @value {Mixed} iterateable object with data\n    // #### @components {Array} result of the this.tag regexp execution\n    // #### @tagname {String} the name of the tag that we iterate on\n    // #### @key {String} the key of the data that we need to extract from the value\n    // #### @map {Object} attribute mappings\n    //\n    // Iterate over over the supplied HTML.\n    //\n    iterate: function iterate(html, value, components, tagname, key, map) {\n      var output  = '',\n          segment = matchClosing(components.input, tagname, html),\n          data = {};\n\n      // Is it an array?\n      if (Array.isArray(value)) {\n        // Yes: set the output to the result of iterating through the array\n        for (var i = 0, l = value.length; i < l; i++) {\n          // If there is a key, then we have a simple object and\n          // must construct a simple object to use as the data\n          if (key) {\n            data[key] = value[i];\n          } else {\n            data = value[i];\n          }\n\n          output += this.bind(segment, data, map);\n        }\n\n        return output;\n      } else if (typeof value === 'object') {\n        // We need to refine the selection now that we know we're dealing with a\n        // nested object\n        segment = segment.slice(components.input.length, -(tagname.length + 3));\n        return output += this.bind(segment, value, map);\n      }\n\n      return value;\n    },\n\n    //\n    // ### function bind(html, data, map)\n    // #### @html {String} the template that we need to modify\n    // #### @data {Object} data for the template\n    // #### @map {Mapper} instructions for the data placement in the template\n    // Process the actual template\n    //\n    bind: function bind(html, data, map) {\n      if (Array.isArray(data)) {\n        var output = '';\n\n        for (var i = 0, l = data.length; i<l; i++) {\n          output += this.bind(html, data[i], map);\n        }\n\n        return output;\n      }\n\n      html = (html || '').toString();\n      data = data || {};\n\n      var that = this;\n\n      var openers = 0,\n          remove = 0,\n          components,\n          attributes,\n          mappings = map && compileMappings(map.mappings),\n          intag = false,\n          tagname = '',\n          isClosing = false,\n          isSelfClosing = false,\n          selfClosing = false,\n          matchmode = false,\n          createAttribute = map && map.conf && map.conf.create,\n          closing,\n          tagbody;\n\n      var c,\n          buffer = '',\n          left;\n\n      for (var i = 0, l = html.length; i < l; i++) {\n        c = html.charAt(i);\n\n        //\n        // Figure out which part of the HTML we are currently processing. And if\n        // we have queued up enough HTML to process it's data.\n        //\n        if (c === '!' && intag && !matchmode) {\n          intag = false;\n          buffer += html.slice(left, i + 1);\n        } else if (c === '<' && !intag) {\n          closing = true;\n          intag = true;\n          left = i;\n        } else if (c === '>' && intag) {\n          intag = false;\n          tagbody = html.slice(left, i + 1);\n          components = this.tag.exec(tagbody);\n\n          if(!components) {\n            intag = true;\n            continue;\n          }\n\n          isClosing = components[1];\n          tagname = components[2];\n          attributes = components[3];\n          selfClosing = components[4];\n          isSelfClosing = this.selfClosing.test(tagname);\n\n          if (matchmode) {\n            //\n            // and its a closing.\n            //\n            if (!!isClosing) {\n              if (openers <= 0) {\n                matchmode = false;\n              } else {\n                --openers;\n              }\n            } else if (!isSelfClosing) {\n              //\n              // and its not a self-closing tag\n              //\n              ++openers;\n            }\n          }\n\n          if (!isClosing && !matchmode) {\n            //\n            // if there is a match in progress and\n            //\n            if (mappings && mappings.length > 0) {\n              for (var ii = mappings.length - 1; ii >= 0; ii--) {\n                var setAttribute = false\n                  , mapping = mappings[ii]\n                  , shouldSetAttribute = mapping.re && attributes.match(mapping.re);\n\n                //\n                // check if we are targetting a element only or attributes\n                //\n                if ('tag' in mapping && !this.attr.test(tagbody) && mapping.tag === tagname) {\n                  tagbody = tagbody + fetch(data, mapping, '', tagbody);\n                  continue;\n                }\n\n                tagbody = tagbody.replace(this.attr, function(str, key, q, value, a) {\n                  var newdata;\n\n                  if (shouldSetAttribute && mapping.replace !== key || remove) {\n                    return str;\n                  } else if (shouldSetAttribute || typeof mapping.replacePartial1 !== 'undefined') {\n                    setAttribute = true;\n\n                    //\n                    // determine if we should use the replace argument or some value from the data object.\n                    //\n                    if (typeof mapping.replacePartial2 !== 'undefined') {\n                      newdata = value.replace(mapping.replacePartial1, mapping.replacePartial2);\n                    } else if (typeof mapping.replacePartial1 !== 'undefined' && mapping.dataKey) {\n                      newdata = value.replace(mapping.replacePartial1, fetch(data, mapping, value, tagbody, key));\n                    } else {\n                      newdata = fetch(data, mapping, value, tagbody, key);\n                    }\n\n                    return key + '=\"' + (newdata || '') + '\"';\n                  } else if (!mapping.replace && mapping.attribute === key) {\n                    if (\n                      mapping.value === value ||\n                      that.hasClass(value, mapping.value ||\n                      mappings.conf.where === key) ||\n                      (_toString.call(mapping.value) === '[object RegExp]' &&\n                        mapping.value.exec(value) !== null)\n                    ) {\n                      if (mapping.remove) {\n                        //\n                        // only increase the remove counter if it's not a self\n                        // closing element. As matchmode is suffectient to\n                        // remove tose\n                        //\n                        if (!isSelfClosing) remove++;\n                        matchmode = true;\n                      } else if (mapping.plates) {\n                        var partial = that.bind(\n                            mapping.plates\n                          , typeof mapping.data === 'string' ? fetch(data, { dataKey: mapping.data }) : mapping.data || data\n                          , mapping.mapper\n                        );\n\n                        buffer += tagbody + that.iterate(html, partial, components, tagname, undefined, map);\n                        matchmode = true;\n                      } else {\n                        var v = newdata = fetch(data, mapping, value, tagbody, key);\n                        newdata = tagbody + newdata;\n\n                        if (Array.isArray(v)) {\n                          newdata = that.iterate(html, v, components, tagname, value, map);\n                          // If the item is an array, then we need to tell\n                          // Plates that we're dealing with nests\n                          that.nest.push(tagname);\n                        } else if (typeof v === 'object') {\n                          newdata = tagbody + that.iterate(html, v, components, tagname, value, map);\n                        }\n\n                        buffer += newdata || '';\n                        matchmode = true;\n                      }\n                    }\n                  }\n\n                  return str;\n                });\n\n                //\n                // Do we need to create the attributes if they don't exist.\n                //\n                if (createAttribute && shouldSetAttribute && !setAttribute) {\n                  var spliced = selfClosing ? 2 : 1\n                    , close = selfClosing ? '/>': '>'\n                    , left = tagbody.substr(0, tagbody.length - spliced);\n\n                  if (left[left.length - 1] === ' ') {\n                    left = left.substr(0, left.length - 1);\n\n                    if (selfClosing) {\n                      close = ' ' + close;\n                    }\n                  }\n\n                  tagbody = [\n                    left,\n                    ' ',\n                    mapping.replace,\n                    '=\"',\n                    fetch(data, mapping),\n                    '\"',\n                    close\n                  ].join('');\n                }\n              }\n            } else {\n              //\n              // if there is no map, we are just looking to match\n              // the specified id to a data key in the data object.\n              //\n              tagbody.replace(this.attr, function (attr, key, q, value, idx) {\n                if (key === map && map.conf.where || 'id' && data[value]) {\n                  var v = data[value],\n                      nest = Array.isArray(v),\n                      output = nest || typeof v === 'object'\n                        ? that.iterate(html.substr(left), v, components, tagname, value, map)\n                        : v;\n\n                  // If the item is an array, then we need to tell\n                  // Plates that we're dealing with nests\n                  if (nest) { that.nest.push(tagname); }\n\n                  buffer += nest ? output : tagbody + output;\n                  matchmode = true;\n                }\n              });\n            }\n          }\n\n          //\n          // if there is currently no match in progress\n          // just write the tagbody to the buffer.\n          //\n          if (!matchmode && that.nest.length === 0) {\n            if (!remove) buffer += tagbody;\n\n            if (remove && !!isClosing) --remove;\n          } else if (!matchmode && that.nest.length) {\n              this.nest.pop();\n          }\n        } else if (!intag && !matchmode) {\n          //\n          // currently not inside a tag and there is no\n          // match in progress, we can write the char to\n          // the buffer.\n          //\n          if (!remove) buffer += c;\n        }\n      }\n      return buffer;\n    }\n  };\n\n  //\n  // ### function Mapper(conf)\n  // #### @conf {Object} configuration object\n  // Constructor function for the Mapper instance that is responsible for\n  // providing the mapping for the data structure\n  //\n  function Mapper(conf) {\n    if (!(this instanceof Mapper)) { return new Mapper(conf); }\n\n    this.mappings = [];\n    this.conf = conf || {};\n  }\n\n  //\n  // ### function last(newitem)\n  // #### @newitem {Boolean} do we need to add a new item to the mapping\n  // Helper function for adding new attribute maps to a Mapper instance\n  //\n  function last(newitem) {\n    if (newitem) {\n      this.mappings.push({});\n    }\n\n    var m = this.mappings[this.mappings.length - 1];\n\n    if (m && m.attribute && m.value && m.dataKey && m.replace) {\n      m.re = new RegExp(m.attribute + '=([\\'\"]?)' + m.value + '\\\\1');\n    } else if (m) {\n      delete m.re;\n    }\n\n    return m;\n  }\n\n  //\n  // Create the actual chainable methods: where('class').is('foo').insert('bla')\n  //\n  Mapper.prototype = {\n    //\n    // ### function replace(val1, val2)\n    // #### @val1 {String|RegExp} The part of the attribute that needs to be replaced\n    // #### @val2 {String} The value it should be replaced with\n    //\n    replace: function replace(val1, val2) {\n      var l = last.call(this);\n      l.replacePartial1 = val1;\n      l.replacePartial2 = val2;\n      return this;\n    },\n\n    //\n    // ### function use(val)\n    // #### @val {String} A string that represents a key.\n    // Data will be inserted into the attribute that was specified in the\n    // `where` clause.\n    //\n    use: function use(val) {\n      last.call(this).dataKey = val;\n      return last.call(this) && this;\n    },\n\n    //\n    // ### function where(val)\n    // #### @val {String} an attribute that may be found in a tag\n    // This method will initiate a clause. Once a clause has been established\n    // other member methods will be chained to each other in any order.\n    //\n    where: function where(val) {\n      last.call(this, true).attribute = val;\n      return last.call(this) && this;\n    },\n\n    //\n    // ### function class(val)\n    // #### @val {String} a value that may be found in the `class` attribute of a tag\n    // the method name should be wrapped in quotes or it will throw errors in IE.\n    //\n    'class': function className(val) {\n      return this.where('class').is(val);\n    },\n\n    //\n    // ### function tag(val)\n    // #### @val {String} the name of the tag should be found\n    //\n    tag: function tag(val) {\n      last.call(this, true).tag = val;\n      return this;\n    },\n\n    //\n    // ### function is(val)\n    // #### @val {string} The value of the attribute that was specified in the\n    // `where` clause.\n    //\n    is: function is(val) {\n      last.call(this).value = val;\n      return last.call(this) && this;\n    },\n\n    //\n    // ### function has(val)\n    // #### @val {String|RegExp} The value of the attribute that was specified\n    // in the `where` clause.\n    //\n    has: function has(val) {\n      last.call(this).value = val;\n      this.replace(val);\n      return last.call(this) && this;\n    },\n\n    //\n    // ### function insert(val)\n    // #### @val {String} A string that represents a key. Data will be inserted\n    // in to the attribute that was specified in the `where` clause.\n    //\n    insert: function insert(val) {\n      var l = last.call(this);\n      l.replace = l.attribute;\n      l.dataKey = val;\n      return last.call(this) && this;\n    },\n\n    //\n    // ### function as(val)\n    // #### @val {String} A string that represents an attribute in the tag.\n    // If there is no attribute by that name name found, one may be created\n    // depending on the options that where passed in the `Plates.Map`\n    // constructor.\n    //\n    as: function as(val) {\n      last.call(this).replace = val;\n      return last.call(this) && this;\n    },\n\n    //\n    // ### function remove()\n    // This will remove the element that was specified in the `where` clause\n    // from the template.\n    //\n    remove: function remove() {\n      last.call(this).remove = true;\n      return last.call(this, true);\n    },\n\n    //\n    // ### function append(plates, data, map)\n    // #### @plates {String} Template or path/id of the template\n    // #### @data {Object|String} data for the appended template\n    // #### @map {Plates.Map} mapping for the data\n    //\n    append: function append(plates, data, map) {\n      var l = last.call(this);\n\n      if (data instanceof Mapper) {\n        map = data;\n        data = undefined;\n      }\n\n      // If the supplied plates template doesn't contain any HTML it's most\n      // likely that we need to import it. To improve performance we will cache\n      // the result of the file system.\n      if (!/<[^<]+?>/.test(plates) && !exports.cache[plates]) {\n        // figure out if we are running in Node.js or a browser\n        if ('document' in env && 'getElementById' in env.document) {\n          exports.cache[plates] = document.getElementById(plates).innerHTML;\n        } else {\n          exports.cache[plates] = require('fs').readFileSync(\n            require('path').join(process.cwd(), plates),\n            'utf8'\n          );\n        }\n      }\n\n      l.plates = exports.cache[plates] || plates;\n      l.data = data;\n      l.mapper = map;\n\n      return last.call(this, true);\n    }\n  };\n\n  //\n  // Provide helpful aliases that well help with increased compatibility as not\n  // all browsers allow the Mapper#class prototype (IE).\n  //\n  Mapper.prototype.className = Mapper.prototype['class'];\n\n  //\n  // Aliases of different methods.\n  //\n  Mapper.prototype.partial = Mapper.prototype.append;\n  Mapper.prototype.to = Mapper.prototype.use;\n\n  //\n  // Expose a simple cache object so people can clear the cached partials if\n  // they want to.\n  //\n  exports.cache = {};\n\n  //\n  // Expose the Plates#bind interface.\n  //\n  exports.bind = function bind(html, data, map) {\n    var merge = new Merge();\n    return merge.bind(html, data, map);\n  };\n\n  //\n  // Expose the Mapper.\n  //\n  exports.Map = Mapper;\n}(Plates, this);\n"}